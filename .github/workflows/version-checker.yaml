name: Check version changed
on:
  push:
    branches-ignore: "main"

jobs:
  check-version:
    name: Check version has changed
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Checkout current branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Check version of ${{ github.ref }}
        id: push-version
        run: |
          VERSION=$(python3 <<EOF
          import importlib
          import tomllib

          with open("pyproject.toml", "rb") as fp:
              data = tomllib.load(fp)
              if version := data["project"].get("version"):
                  print(version)
              elif "version" in data["project"].get("dynamic", ()):
                  how, where = next(
                      iter(data["tool"]["setuptools"]["dynamic"]["version"].items())
                  )
                  if how == "attr":
                      module_name, attr = where.rsplit(".", maxsplit=1)
                      module = importlib.import_module(module_name)
                      print(getattr(module, attr))
          EOF
          )
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "${VERSION}"
      - name: Checkout version of main
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Check version of main
        id: main-version
        run: |
          VERSION=$(python3 <<EOF
          import importlib
          import tomllib

          with open("pyproject.toml", "rb") as fp:
              data = tomllib.load(fp)
              if version := data["project"].get("version"):
                  print(version)
              elif "version" in data["project"].get("dynamic", ()):
                  how, where = next(
                      iter(data["tool"]["setuptools"]["dynamic"]["version"].items())
                  )
                  if how == "attr":
                      module_name, attr = where.rsplit(".", maxsplit=1)
                      module = importlib.import_module(module_name)
                      print(getattr(module, attr))
          EOF
          )
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "${VERSION}"
      - name: Post error message
        if: ${{steps.main-version.outputs.version == steps.push-version.outputs.version}}
        run: |
          echo "::error::Version (${{steps.push-version.outputs.version}}) is the same as main (${{steps.main-version.outputs.version}})."
          exit 1
      - name: Post summary
        run: |
          echo 'Version changed from ${{steps.main-version.outputs.version}} to ${{steps.push-version.outputs.version}}' >> $GITHUB_STEP_SUMMARY
      